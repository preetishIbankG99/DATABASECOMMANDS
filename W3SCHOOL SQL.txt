select
========
Syntax-SELECT * FROM table_name;
select * from emp;

select empno,job from emp;

DISTINCT
=========
The SELECT DISTINCT statement is used to return only distinct (different) values.
select distinct job from emp;
select count(distinct job)from emp;

WHERE
========
The WHERE clause is used to filter records.
select * from emp where ename='CLARK';

SQL AND, OR and NOT Operators
=============================
The WHERE clause can be combined with AND, OR, and NOT operators.

The AND and OR operators are used to filter records based on more than one condition:

The AND operator displays a record if all the conditions separated by AND are TRUE.
The OR operator displays a record if any of the conditions separated by OR is TRUE.
The NOT operator displays a record if the condition(s) is NOT TRUE.

AND:::SELECT * FROM emp
WHERE SAL=3000 AND JOB='ANALYST';

OR::::SELECT * FROM emp
WHERE SAL=3000 OR JOB='ANALYST';

NOT:::SELECT * FROM emp WHERE NOT SAL=3000;

SELECT * FROM EMP WHERE JOB='MANAGER' AND (DEPTNO=10 OR DEPTNO=30);
The SQL ORDER BY Keyword
=========================
The ORDER BY keyword is used to sort the result-set in ascending or descending order.
)ASCEND(SELECT * FROM EMP ORDER BY DEPTNO;

)DESCEND(SELECT * FROM EMP ORDER BY DEPTNO DESC;

SELECT * FROM EMP ORDER BY SAL,JOB;

SELECT * FROM EMP ORDER BY SAL,JOB DESC;

NULL
=======
A field with a NULL value is a field with no value.
SELECT ENAME,DEPTNO,COMM
FROM EMP
WHERE COMM IS NULL;

SELECT ENAME,DEPTNO,COMM
FROM EMP
WHERE COMM IS NOT NULL;

SQL UPDATE Statement
====================
UPDATE Table>>UPDATE EMP SET ENAME='ADAM GILCHRIST',SAL=3000 WHERE EMPNO=7782;

The SQL DELETE Statement
========================
DELETE FROM table_name WHERE condition;
DELETE FROM EMP WHERE EMPNO=7782;

The SQL SELECT TOP Clause
==========================
The SELECT TOP clause is used to specify the number of records to return.

SELECT TOP 3 * FROM Customers;

SELECT TOP 50 PERCENT * FROM Customers;

SELECT TOP 3 * FROM Customers
WHERE Country='Germany';

SELECT * FROM Customers
WHERE Country='Germany'
LIMIT 3;

The SQL MIN() and MAX() Functions
==================================
The MIN() function returns the smallest value of the selected column.

The MAX() function returns the largest value of the selected column.

SELECT MIN(Price) AS SmallestPrice
FROM Products;

SELECT MAX(Price) AS LargestPrice
FROM Products;

SELECT MIN(SAL) AS LESSSAL FROM EMP;

The SQL COUNT(), AVG() and SUM() Functions
===========================================
The COUNT() function returns the number of rows that matches a specified criterion.
The AVG() function returns the average value of a numeric column
The SUM() function returns the total sum of a numeric column

SQL>SELECT COUNT(ENAME)FROM EMP;
SQL>SELECT AVG(SAL)FROM EMP;
SQL>SELECT SUM(SAL)FROM EMP;

The SQL LIKE Operator
============================
The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

There are two wildcards often used in conjunction with the LIKE operator:

 The percent sign (%) represents zero, one, or multiple characters
 The underscore sign (_) represents one, single character

LIKE Operator	Description
WHERE CustomerName LIKE 'a%'	Finds any values that start with "a"
WHERE CustomerName LIKE '%a'	Finds any values that end with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%'	Finds any values that start with "a" and are at least 2 characters in length
WHERE CustomerName LIKE 'a__%'	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	Finds any values that start with "a" and ends with "o"

SELECT * FROM Customers
WHERE CustomerName LIKE '%a';(starting with "a":)

SELECT * FROM Customers
WHERE CustomerName LIKE '%or%';("or" in any position:)

SELECT * FROM Customers
WHERE CustomerName LIKE '_r%';("r" in the second position:)


SELECT * FROM Customers
WHERE CustomerName LIKE 'a__%';(CustomerName that starts with "a" and are at least 3 characters in length:)


SELECT * FROM Customers
WHERE ContactName LIKE 'a%o';(ContactName that starts with "a" and ends with "o":)

SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'a%';(CustomerName that does NOT start with "a":)

Wildcard Characters in SQL Server
=================================
Symbol	Description	Example
%	Represents zero or more characters	bl% finds bl, black, blue, and blob
_	Represents a single character	h_t finds hot, hat, and hit
[]	Represents any single character within the brackets	h[oa]t finds hot and hat, but not hit
^	Represents any character not in the brackets	h[^oa]t finds hit, but not hot and hat
-	Represents any single character within the specified range	c[a-b]t finds cat and cbt




LIKE Operator	Description
WHERE CustomerName LIKE 'a%'	Finds any values that starts with "a"
WHERE CustomerName LIKE '%a'	Finds any values that ends with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a__%'	Finds any values that starts with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	Finds any values that starts with "a" and ends with "o"
SELECT * FROM Customers
WHERE City LIKE 'ber%';( City starting with "ber":)
SELECT * FROM Customers
WHERE City LIKE '%es%';(City containing the pattern "es": )
SELECT * FROM Customers
WHERE City LIKE '_ondon';(City starting with any character, followed by "ondon":)
SELECT * FROM Customers
WHERE City LIKE 'L_n_on';(City starting with "L", followed by any character, followed by "n", followed by any character, followed by "on":)
SELECT * FROM Customers
WHERE City LIKE '[bsp]%';(customers with a City starting with "b", "s", or "p":)
SELECT * FROM Customers
WHERE City LIKE '[a-c]%';(City starting with "a", "b", or "c":)
SELECT * FROM Customers
WHERE City LIKE '[!bsp]%';
or
SELECT * FROM Customers
WHERE City NOT LIKE '[bsp]%';
( City NOT starting with "b", "s", or "p":)

The SQL IN Operator
======================
The IN operator allows you to specify multiple values in a WHERE clause.

The IN operator is a shorthand for multiple OR conditions.

SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');

SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);

The SQL BETWEEN Operator
=============================
The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.

The BETWEEN operator is inclusive: begin and end values are included. 

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20;

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20
AND CategoryID NOT IN (1,2,3);

SELECT * FROM Orders
WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#;

SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';


SELECT * FROM Products
WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

SELECT * FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;



SQL Aliases
==============
SQL aliases are used to give a table, or a column in a table, a temporary name.

Aliases are often used to make column names more readable.

An alias only exists for the duration of that query.

An alias is created with the AS keyword.

SELECT CustomerID AS ID, CustomerName AS Customer
FROM Customers;

SELECT CustomerName AS Customer, ContactName AS [Contact Person]
FROM Customers;

The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the "Customers" and "Orders" tables, and give them the table aliases of "c" and "o" respectively (Here we use aliases to make the SQL shorter):

Example
SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;

The SQL GROUP BY Statement
=============================
The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".

The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
ORDER BY COUNT(CustomerID) DESC;

SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
GROUP BY ShipperName;

The SQL HAVING Clause
=====================
The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.



SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5;


SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5
ORDER BY COUNT(CustomerID) DESC;

SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM (Orders
INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID)
GROUP BY LastName
HAVING COUNT(Orders.OrderID) > 10;

SQL EXISTS Operator
===================
The EXISTS operator is used to test for the existence of any record in a subquery.

The EXISTS operator returns TRUE if the subquery returns one or more records.

SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);


SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price = 22);

COMMENTS
==========
Single Line Comments
Single line comments start with --.

Any text between -- and the end of the line will be ignored (will not be executed).

The following example uses a single-line comment as an explanation:

Example
--Select all:
SELECT * FROM Customers;

Multi-line comments start with /* and end with */.

Any text between /* and */ will be ignored.

The following example uses a multi-line comment as an explanation:

Example
/*Select all the columns
of all the records
in the Customers table:*/
SELECT * FROM Customers

SELECT * FROM Customers WHERE (CustomerName LIKE 'L%'
OR CustomerName LIKE 'R%' /*OR CustomerName LIKE 'S%'
OR CustomerName LIKE 'T%'*/ OR CustomerName LIKE 'W%')
AND Country='USA'
ORDER BY CustomerName;







